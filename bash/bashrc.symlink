#==============================================================================
# BASH RC
#   This file is run once for every bash shell.
#   It should be used to define all bash aliases, functions, settings and local variables
#
#   Environment variables that are global and never change can be defined in bash_profile
#
#   This file might be executed without calling bash_profile first. In most cases it's OK,
#   since the execution happens in an environment that already has all global variables
#   from a previous profile, such as when calling a bash script.
#
#   However, ssh command executions (not ssh logins) and scp connections, for example
#   invoke bashrc without bash_profile
#

if [ -r /etc/bashrc ]; then
  source /etc/bashrc
fi


#=============================================================================
#-- ENVIRONMENT & PATH -------------------------------------------------------
if [ "$ENVIRONMENT" = "" ]; then
  if [ $(uname) = Darwin ]; then
    export ENVIRONMENT="OSX"

    export PATH=/usr/bin:/bin:/usr/sbin:/sbin
    export JAVA_HOME=$(/usr/libexec/java_home)

    if [ -d ~/Work/tools/android-sdk ]; then
      export PATH=~/Work/tools/android-sdk/tools:~/Work/tools/android-sdk/platform-tools:$PATH
    fi

    if [ -d ~/Work/tools/scala ]; then
      export PATH=~/Work/tools/scala/bin:$PATH
    fi

    if [ -d /usr/local/mysql/lib ]; then
      export DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH
    fi

    if [ -d /usr/local/lib/node_modules ]; then
      export NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH
    fi
  elif [ "$OSTYPE" = "linux-gnu" ]; then
    export ENVIRONMENT="Linux"

    export PATH=/usr/bin:/bin:/usr/sbin:/sbin:~/bin
  elif [ "$OSTYPE" = "solaris2.9" ]; then
    export ENVIRONMENT="Solaris"

  elif [ "$OSTYPE" = "cygwin" ]; then
    export ENVIRONMENT="Win32 Cygwin"
  else
    export ENVIRONMENT="Unknown"
  fi
fi

export PATH=~/bin:~/.bin:/usr/local/bin:/usr/local/sbin:$PATH

#=============================================================================
#-- HISTORY ------------------------------------------------------------------

# Ignore anything that starts with a space, or bg/fg, or exit
#export HISTIGNORE="[ \t]*"
# I like a long history
export HISTSIZE=1000
export HISTFILESIZE=500
# And let's append, not overwrite, so we don't lose history when using multiple terminals
shopt -s histappend
# Enable multiline commands in history
shopt -s cmdhist
# Edit substituted commands before executing
shopt -s histverify
# Remove duplicates from history
export HISTCONTROL=ignoredups

function help_history {
  echo "Command Selection"
  echo "    !! - Last command          !-n - nth previous command"
  echo "Substring Selection"
  echo "    !!:$ - Last word (or !$)"
  echo "    !!:^ - First word (not zeroth, the command)"
  echo "    !!:n - nth word"
  echo "  !!:n-m - nth to mth words"
  echo "    !!:* - All words except zeroth"
  echo "Modifiers (!!:n:modifier)"
  echo "    :h - Remove trailing pathname (head)   :t - Remove leading pathname (tail)"
  echo "    :r - Remove trailing extension         :e - Remove all but extension"
}

#=============================================================================
#-- Editors & Programs -------------------------------------------------------
if [ -f /usr/bin/pico ]; then
  export EDITOR="/usr/bin/pico -w"
elif [ -f /usr/local/bin/pico ]; then
  export EDITOR="/usr/local/bin/pico -w"
elif [ -f /usr/bin/nano ]; then
  export EDITOR="/usr/bin/nano -w"
elif [ -f /usr/local/bin/nano ]; then
  export EDITOR="/usr/local/bin/nano -w"
fi

export CVS_RSH=ssh

export LESS="--quit-at-eof --ignore-case --RAW-CONTROL-CHARS"
export MORE="$LESS"

#=============================================================================
#-- ALIASES ------------------------------------------------------------------
alias more=less

alias e="$EDITOR"

alias l="ls -lh"
alias la="ls -lha"
alias psg="(ps auxwww | head -1) && ps auxwww | grep -v grep | grep -i"
alias ducks="du -cks * |sort -rn |head -11"
if [ "$ENVIRONMENT" = "Linux" ]; then
  alias ls="ls --color=tty -ACFh"
elif [ "$ENVIRONMENT" = "OSX" ]; then
  alias ls="ls -ACFGh -w"
elif [ "$ENVIRONMENT" = "Solaris" ]; then
  alias psg="ps -ef | grep -v grep | grep -i"
fi

alias s="screen -xRRU"
alias r="rake"
alias fr="FASTRAKE=1 rake"
alias t="tail -f $1|more"

alias sup="svn up"
alias sci="svn ci"
alias sdi="svn diff"
alias sst="svn st"

alias g="git"
alias gs="git status"
alias gci="git commit -v"
alias gcia="git commit -v -a"
alias gco="git checkout"
alias gb="git branch"

alias vg="vagrant"

# QuickLook shortcut on Leopard
if [ "$ENVIRONMENT" = "OSX" ]; then
  alias ql='qlmanage -p "$@" >& /dev/null'
fi

function utf {
  export LANG="en_US.UTF-8"
  export LC_ALL="en_US.UTF-8"
}

function iso {
  export LANG="en_US.ISO-8859-1"
  export LC_ALL="en_US.ISO-8859-1"
}

utf


function bundle_exec {
  if [[ -a Gemfile ]]; then
    bundle exec $*
  else
    $*
  fi
}

alias rake="bundle exec rake"
alias cap="bundle exec cap"
alias spec="bundle exec spec"
alias foreman="bundle exec foreman"

#==============================================================================
# Docker Tricks
#==============================================================================
alias dinit="$(boot2docker shellinit)"
alias d="docker"
function dco() {
  if [ -f "./docker-compose.yml" ]; then
    docker-compose -f ./docker-compose.yml -p $(basename -- "$(dirname -- "$PWD")") "${@}"
  elif [ -f "../devenv/docker-compose.yml" ]; then
    docker-compose -f ../devenv/docker-compose.yml -p $(basename -- "$(dirname -- "$PWD")") "${@}"
  elif [ -f "./devenv/docker-compose.yml" ]; then
    docker-compose -f ./devenv/docker-compose.yml -p $(basename -- "$PWD") "${@}"
  else
    echo "Could not find a docker-compose.yml file, nor a devenv directory."
  fi
}

function dcr() {
  if [ -f "../devenv/docker-compose.yml" ]; then
    docker-compose -f ../devenv/docker-compose.yml -p $(basename -- "$(dirname -- "$PWD")") run $(basename $PWD) "${@}"
  else
    echo "You can only invoke 'dcr' inside a project subdirectory, next to a 'devenv' directory containing docker-compose.yml"
  fi
}

# For docker-compose based projects, with a local rakefile at the root level, and per-service directories where you want to invoke tasks
function lrake() {
  if [ -f "./Dockerfile" ]; then
    DIR=$(basename $PWD)
    echo "rake --rakefile ../Rakefile ${@} DIR=$DIR"
    pushd .. >/dev/null
    rake ${@} DIR=$DIR
    popd >/dev/null
  else
    rake ${@}
  fi
}

#==============================================================================
# Based on http://gist.github.com/317004, but renamed as 'cds'

# Help: cds -h
# Show all links: cds
# Delete link: cds -d foo
# Clear all: cds -c
# Store link to working directory: cds -a foo
# Store link to given path: cds -n foo /some/path
# Go to link: cds foo
function cds() {
  mkdir -p ~/.cds
  dir=""
  if [ -z "$1" ]; then
    ls -Al ~/.cds
  elif [ "-h" == "$1" ]; then
    echo 'Usage: cds [-h | <name> | -a <name> | -n <name> <path> | -d <name> | -c]' >&2
    return
  elif [ "-c" == "$1" ]; then
    for name in $(ls ~/.cdg); do
      unlink ~/.cds/${name}
    done
  elif [ "-a" == "$1" ]; then
    if [ -z "$2" ]; then
      echo 'Usage: cds -a <name>' >&2
      return
    fi
    ln -s $(pwd) ~/.cds/$2
  elif [ "-n" == "$1" ]; then
    if [ -z "$2" ]; then
      echo 'Usage: cds -n <name> <path>' >&2
      return
    fi
    ln -s $3 ~/.cds/$2
  elif [ "-d" == "$1" ]; then
    if [ -z "$2" ]; then
      echo 'Usage: cds -d <name>' >&2
      return
    fi
    unlink ~/.cds/$2
  else
    cd -P ~/.cds/$1
  fi
}

function _cds() {
  mkdir -p ~/.cds
  local word=${COMP_WORDS[COMP_CWORD]}
  local names=$(/bin/ls ~/.cds/)
  COMPREPLY=($(compgen -W "${names}" -- "${word}"))
  if [ -z ${COMPREPLY} ]; then COMPREPLY=""; fi
}

complete -o nospace -o default -F _cds cds

#==============================================================================
# http://daniele.livejournal.com/76011.html
function up() {
  dir=""
  if [ -z "$1" ]; then
    dir=..
  elif [[ $1 =~ ^[0-9]+$ ]]; then
    x=0
    while [ $x -lt ${1:-1} ]; do
      dir=${dir}../
      x=$(($x+1))
    done
  else
    dir=${PWD%/$1/*}/$1
  fi
  cd "$dir";
}

function upstr() {
  echo "$(up "$1" && pwd)";
}

#==============================================================================
# from http://www.ncb.ernet.in/~nihar/utilLinks.php#bw-util
function bandwidth {
  ifconfig $1 | awk 'BEGIN {FS="[:(]"} /RX bytes/{print $2 > "/tmp/bytes"}'
  sleep 10; # Wait for 2 seconds, and then take the second reading..
  ifconfig $1 | awk 'BEGIN {FS="[:(]"} {getline earlier < "/tmp/bytes"}\
    /RX bytes/{bw=($2-earlier); \
    if ((bw*4) < 102400) system ("echo -ne ${ANSIRED}");\
    else if ((bw*4) > 2621440) system ("echo -ne ${ANSIBOLD}"); \
    else if ((bw*4) > 2097152) system ("echo -ne ${ANSIYELLOW}"); \
    else if ((bw*4) > 1048576) system ("echo -ne ${ANSIGREEN}"); \
    else system ("echo -ne ${ANSIRESET}"); \
    print "BW: \"bw/(1024*10)\" KB/s, \"(bw*8)/(1024*1024*10)\" Mb/s "\
    strftime("%H:%M:%S [%d/%m/%y]"); }'
}

#==============================================================================
#-- SUDO ----------------------------------------------------------------------
function sudobash {
  if [ "$ENVIRONMENT" = "Linux" ]; then
    sudo -u $1 bash --init-file $ORIGINALHOME/.bash_profile
  elif [ "$ENVIRONMENT" = "OSX" ]; then
    sudo -u $1 -H /bin/bash --init-file $ORIGINALHOME/.bash_profile
  else
    echo subash not suported in environment '$ENVIRONMENT'
  fi
}
alias sudoroot="sudobash root"
alias sb="sudobash"


#==============================================================================
#-- Deploy this file ----------------------------------------------------------
function deploy_bashrc_to {
  echo "Deploying to $1"
  scp ~/.bashrc ~/.bash_profile ~/.screenrc ~/.inputrc ~/.irbrc $1:
}

function deploy_bashrc {
  SITES="home.notso.net"
  SITES="$SITES arepa.notso.net lacomarca.org"

  for SITE in $SITES; do
    deploy_bashrc_to $SITE
  done
}

#==============================================================================
#-- RELOAD ENVIRONMENT --------------------------------------------------------
function reload {
  source "$ORIGINALHOME/.bash_profile"
  source "$ORIGINALHOME/.bashrc"
}

#==============================================================================
#-- TAB COMPLETION ------------------------------------------------------------

# From http://www.macosxhints.com/article.php?story=20080317085050719
if [ -r "$ORIGINALHOME/.ssh/known_hosts" ]; then
  complete -W "$(echo `cat $ORIGINALHOME/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh
fi

if [ -r "$ORIGINALHOME/.bin/git-completion.bash" ]; then
  source "$ORIGINALHOME/.bin/git-completion.bash"
  complete -o default -o nospace -F _git g
fi

#==============================================================================
export LSCOLORS=Dxfxcxdxbxegedabagacad
# dir, link, socket, pipe, exec, block special, char special, suid, sgid, sticky, writtable
# defaults to exfxcxdxbxegedabagacad

#==============================================================================
#-- ANSI Codes ----------------------------------------------------------------
ANSIBLACK="\033[0;30m"
ANSIGRAY="\033[1;30m"
ANSIRED="\033[0;31m"
ANSILRED="\033[1;31m"
ANSIGREEN="\033[0;32m"
ANSILGREEN="\033[1;32m"
ANSIBROWN="\033[0;33m"
ANSIYELLOW="\033[1;33m"
ANSIBLUE="\033[0;34m"
ANSILBLUE="\033[1;34m"
ANSIPURPLE="\033[0;35m"
ANSILPURPLE="\033[1;35m"
ANSICYAN="\033[0;36m"
ANSILCYAN="\033[1;36m"
ANSILGRAY="\033[0;37m"
ANSIWHITE="\033[1;37m"

ANSIBACKBLACK="\033[40m"
ANSIBACKRED="\033[41m"
ANSIBACKGREEN="\033[42m"
ANSIBACKYELLOW="\033[43m"
ANSIBACKBLUE="\033[44m"
ANSIBACKPURPLE="\033[45m"
ANSIBACKCYAN="\033[46m"
ANSIBACKGRAY="\033[47m"

ANSIRESET="\033[0m"
ANSIBOLD="\033[1m"
ANSIUNDERSCORE="\033[4m"
ANSIBLINK="\033[5m"
ANSIREVERSE="\033[7m"
ANSICONCEALED="\033[8m"

XTERM_SET_TITLE="\033]2;"
XTERM_END="\007"
ITERM_SET_TAB="\033]1;"
ITERM_END="\007"
SCREEN_SET_STATUS="\033]0;"
SCREEN_END="\007"
SCREEN_SET_TITLE="\033k"
SCREEN_END_TITLE="\033\0134"

#==============================================================================
#-- Prompt --------------------------------------------------------------------
if [ "$USER" = "vagrant" ]; then
  CWD_COLOR=$ANSIRED$ANSIBACKYELLOW
  PROMPT_COLOR=$ANSIRED$ANSIBACKYELLOW
elif [ "$UID" = "$ORIGINALUID" ]; then
  CWD_COLOR=$ANSIBLACK$ANSIBACKGREEN
  PROMPT_COLOR=$ANSIBLACK$ANSIBACKGREEN
elif [ "$UID" = "0" ]; then
  CWD_COLOR=$ANSIYELLOW$ANSIBACKRED
  PROMPT_COLOR=$ANSIYELLOW$ANSIBACKRED
else
  CWD_COLOR=$ANSIRED$ANSIBACKYELLOW
  PROMPT_COLOR=$ANSIRED$ANSIBACKYELLOW
fi


function promptcommand {
  history -a  # Save new commands to history file
  history -n  # Reload history

  LAST_ERROR=$?
  PROMPT_MSG=""
  if [ "$LAST_ERROR" != "0" ]; then
    export PROMPT_MSG="<$LAST_ERROR>"
  fi

  GITBRANCH="`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (git: \1)/'`"  # probably_corey +5 in unix

  WHOAMI="`whoami`@`hostname -s | tr [A-Z] [a-z]`"

  XTERM_TITLE="${WHOAMI} : `pwd`"
  echo -ne "${XTERM_SET_TITLE}${XTERM_TITLE}${XTERM_END}"

  if [ "$TAB" != "" ]; then
    TAB_TITLE="$TAB"
  else
    TAB_TITLE="${WHOAMI}"
  fi

  echo -ne "${ITERM_SET_TAB}${TAB_TITLE}${ITERM_END}"

  if [ "$TERM" == "screen" ]; then
    echo -ne "${SCREEN_SET_STATUS}${TAB_TITLE}${SCREEN_END}"
    echo -ne "${SCREEN_SET_TITLE}${TAB_TITLE}${SCREEN_END_TITLE}"
  fi
}

PROMPT_COMMAND="promptcommand"

export PS1="\[${ANSIRESET}\]\[${CWD_COLOR}\]\${WHOAMI} :\${GITBRANCH} \w \[${ANSIRESET}\]  \[${ANSIRED}\]\${PROMPT_MSG}\[${ANSIRESET}\]\n\[${PROMPT_COLOR}\]${WINDOW_MSG}\t \$ \[${ANSIRESET}\] "

#=============================================================================
#-- RUBY ---------------------------------------------------------------------

if [[ -s "$HOME/.rbenv" ]]; then
  PATH=$PATH:$HOME/.rbenv/bin # Add rbenv to PATH for scripting
  eval "$(rbenv init -)"
elif [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
  PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
  . "$HOME/.rvm/scripts/rvm"
fi


if [[ -s "/usr/local/heroku" ]]; then
  ### Added by the Heroku Toolbelt
  export PATH="/usr/local/heroku/bin:$PATH"
fi


if [[ -s "/Users/sd/anaconda/bin" ]]; then
  # Anaconda
  export PATH="/Users/sd/anaconda/bin:$PATH"
fi
