#==============================================================================
# BASH RC
#   This file is run once for every bash shell.
#   It should be used to define all bash aliases, functions, settings and local variables
#
#   Environment variables that are global and never change can be defined in bash_profile
#
#   This file might be executed without calling bash_profile first. In most cases it's OK,
#   since the execution happens in an environment that already has all global variables
#   from a previous profile, such as when calling a bash script.
#
#   However, ssh command executions (not ssh logins) and scp connections, for example
#   invoke bashrc without bash_profile
#

if [ -r /etc/bashrc ]; then
  source /etc/bashrc
fi

#==============================================================================
#-- ALIASES -------------------------------------------------------------------
alias e="$EDITOR"

alias l="ls -lh"
alias la="ls -lha"
alias psg="(ps auxwww | head -1) && ps auxwww | grep -v grep | grep -i"
alias ducks="du -cks * |sort -rn |head -11"
if [ "$ENVIRONMENT" = "Linux" ]; then
  alias ls="ls --color=tty -ACFh"
elif [ "$ENVIRONMENT" = "OSX" ]; then
  alias ls="ls -ACFGh -w"
elif [ "$ENVIRONMENT" = "Solaris" ]; then
  alias psg="ps -ef | grep -v grep | grep -i"
fi

alias s="screen -xRRU"
alias r="rake"
alias t="tail -f $1|more"

alias sup="svn up"
alias sci="svn ci"
alias sdi="svn diff"
alias sst="svn st"

alias g="git"
alias gs="git status"
alias gci="git commit -v"
alias gcia="git commit -v -a"
alias gco="git checkout"
alias gb="git branch"

# QuickLook shortcut on Leopard
if [ "$ENVIRONMENT" = "OSX" ]; then
  alias ql='qlmanage -p "$@" >& /dev/null'
fi

function utf {
  export LANG="en_US.UTF-8"
  export LC_ALL="en_US.UTF-8"
}

function iso {
  export LANG="en_US.ISO-8859-1"
  export LC_ALL="en_US.ISO-8859-1"
}

utf


#==============================================================================
# from http://www.ncb.ernet.in/~nihar/utilLinks.php#bw-util
function bandwidth {
  ifconfig $1 | awk 'BEGIN {FS="[:(]"} /RX bytes/{print $2 > "/tmp/bytes"}'
  sleep 10; # Wait for 2 seconds, and then take the second reading..
  ifconfig $1 | awk 'BEGIN {FS="[:(]"} {getline earlier < "/tmp/bytes"}\
    /RX bytes/{bw=($2-earlier); \
    if ((bw*4) < 102400) system ("echo -ne ${ANSIRED}");\
    else if ((bw*4) > 2621440) system ("echo -ne ${ANSIBOLD}"); \
    else if ((bw*4) > 2097152) system ("echo -ne ${ANSIYELLOW}"); \
    else if ((bw*4) > 1048576) system ("echo -ne ${ANSIGREEN}"); \
    else system ("echo -ne ${ANSIRESET}"); \
    print "BW: \"bw/(1024*10)\" KB/s, \"(bw*8)/(1024*1024*10)\" Mb/s "\
    strftime("%H:%M:%S [%d/%m/%y]"); }'
}

#==============================================================================
#-- SUDO ----------------------------------------------------------------------
function sudobash {
  if [ "$ENVIRONMENT" = "Linux" ]; then
    sudo -u $1 bash --init-file $ORIGINALHOME/.bash_profile
  elif [ "$ENVIRONMENT" = "OSX" ]; then
    sudo -u $1 -H /bin/bash --init-file $ORIGINALHOME/.bash_profile
  else
    echo subash not suported in environment '$ENVIRONMENT'
  fi
}
alias sudoroot="sudobash root"
alias sb="sudobash"

#==============================================================================
#-- Deploy this file ----------------------------------------------------------
function deploy_bashrc_to {
  echo "Deploying to $1"
  scp ~/.bashrc ~/.bash_profile ~/.screenrc ~/.inputrc ~/.irbrc $1:
}

function deploy_bashrc {
  SITES="home.notso.net arepa.notso.net lacomarca.org"
  SITES="$SITES chambers.streeteasy.com broadway.streeteasy.com"
  SITES="$SITES duane.streeteasy.com reade.streeteasy.com"
  SITES="$SITES bqe.streeteasy.com fdr.streeteasy.com"
  SITES="$SITES bedford.streeteasy.com ludlow.streeteasy.com"
  SITES="$SITES lenox.streeteasy.com flatbush.streeteasy.com tremont.streeteasy.com"

  for SITE in $SITES; do
    deploy_bashrc_to $SITE
  done
}

#==============================================================================
#-- RELOAD ENVIRONMENT --------------------------------------------------------
function reload {
  source "$ORIGINALHOME/.bash_profile"
  source "$ORIGINALHOME/.bashrc"
}

#==============================================================================
#-- TAB COMPLETION ------------------------------------------------------------

# From http://www.macosxhints.com/article.php?story=20080317085050719
if [ -r "$ORIGINALHOME/.ssh/known_hosts" ]; then
  complete -W "$(echo `cat $ORIGINALHOME/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh
fi

if [ -r "$ORIGINALHOME/.bin/git-completion.bash" ]; then
  source "$ORIGINALHOME/.bin/git-completion.bash"
  complete -o default -o nospace -F _git g
fi

#==============================================================================
#-- ANSI Codes ----------------------------------------------------------------
ANSIBLACK="\033[0;30m"
ANSIGRAY="\033[1;30m"
ANSIRED="\033[0;31m"
ANSILRED="\033[1;31m"
ANSIGREEN="\033[0;32m"
ANSILGREEN="\033[1;32m"
ANSIBROWN="\033[0;33m"
ANSIYELLOW="\033[1;33m"
ANSIBLUE="\033[0;34m"
ANSILBLUE="\033[1;34m"
ANSIPURPLE="\033[0;35m"
ANSILPURPLE="\033[1;35m"
ANSICYAN="\033[0;36m"
ANSILCYAN="\033[1;36m"
ANSILGRAY="\033[0;37m"
ANSIWHITE="\033[1;37m"

ANSIBACKBLACK="\033[40m"
ANSIBACKRED="\033[41m"
ANSIBACKGREEN="\033[42m"
ANSIBACKYELLOW="\033[43m"
ANSIBACKBLUE="\033[44m"
ANSIBACKPURPLE="\033[45m"
ANSIBACKCYAN="\033[46m"
ANSIBACKGRAY="\033[47m"

ANSIRESET="\033[0m"
ANSIBOLD="\033[1m"
ANSIUNDERSCORE="\033[4m"
ANSIBLINK="\033[5m"
ANSIREVERSE="\033[7m"
ANSICONCEALED="\033[8m"

XTERM_SET_TITLE="\033]2;"
XTERM_END="\007"
ITERM_SET_TAB="\033]1;"
ITERM_END="\007"
SCREEN_SET_STATUS="\033]0;"
SCREEN_END="\007"
SCREEN_SET_TITLE="\033k"
SCREEN_END_TITLE="\033\0134"

#==============================================================================
#-- Prompt --------------------------------------------------------------------
if [ "$UID" = "$ORIGINALUID" ]; then
  CWD_COLOR=$ANSIBLACK$ANSIBACKGREEN
  PROMPT_COLOR=$ANSIBLACK$ANSIBACKGREEN
elif [ "$UID" = "0" ]; then
  CWD_COLOR=$ANSIYELLOW$ANSIBACKRED
  PROMPT_COLOR=$ANSIYELLOW$ANSIBACKRED
else 
  CWD_COLOR=$ANSIRED$ANSIBACKYELLOW
  PROMPT_COLOR=$ANSIRED$ANSIBACKYELLOW
fi


function promptcommand {
  LAST_ERROR=$?
  PROMPT_MSG=""
  if [ "$LAST_ERROR" != "0" ]; then
    export PROMPT_MSG="<$LAST_ERROR>"
  fi

  GITBRANCH="`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (git: \1)/'`"  # probably_corey +5 in unix

  XTERM_TITLE="`whoami`@`hostname -s` : `pwd`"
  echo -ne "${XTERM_SET_TITLE}${XTERM_TITLE}${XTERM_END}"

  if [ "$TAB" != "" ]; then
    TAB_TITLE="$TAB"
  else
    TAB_TITLE="`whoami`@`hostname -s`"
  fi

  echo -ne "${ITERM_SET_TAB}${TAB_TITLE}${ITERM_END}"

  if [ "$TERM" == "screen" ]; then
    echo -ne "${SCREEN_SET_STATUS}${TAB_TITLE}${SCREEN_END}"
    echo -ne "${SCREEN_SET_TITLE}${TAB_TITLE}${SCREEN_END_TITLE}"
  fi
}

PROMPT_COMMAND="promptcommand"

export PS1="\[${ANSIRESET}\]\[${CWD_COLOR}\]\u@\h :\${GITBRANCH} \w \[${ANSIRESET}\]  \[${ANSIRED}\]\${PROMPT_MSG}\[${ANSIRESET}\]\n\[${PROMPT_COLOR}\]${WINDOW_MSG}\t \$ \[${ANSIRESET}\] "

