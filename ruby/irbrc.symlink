# The irbrc file for Sebastian Delmont <sd@notso.net>
#
# Most of the code here came from http://wiki.rubygarden.org/Ruby/page/show/Irb/TipsAndTricks
#
unless self.class.const_defined? "IRB_RC_HAS_LOADED"
  require 'rubygems'
#  begin
#    require 'utility_belt'
#  rescue LoadError
#    puts "can't find utility_belt in $: " + $:.join("\n")
#    exit
#  end

  # HISTORY_FILE = "~/.irb.hist"  # rdebug uses this constant name
  # MAXHISTSIZE = 100
  # ENV["HISTSIZE"] = MAXHISTSIZE.to_s
  # ENV["IRB_HISTORY_SIZE"] = MAXHISTSIZE.to_s
  #
  # begin
  #   require 'brice'
  #   Brice.init do |config|
  #     config.history.opt = {:size => MAXHISTSIZE, :path => HISTORY_FILE}
  #
  #
  #   end
  #
  #   # require 'wirble'
  #   # Wirble.init
  #   # Wirble.colorize
  #   # Wirble.history_path = FILE_HISTORY
  #   # Wirble.history_size = MAXHISTSIZE
  #
  # rescue LoadError
  #
  # end
  #

  # begin # ANSI codes
  #   ANSI_BLACK        = "\001\033[0;30m\002"
  #   ANSI_GRAY         = "\001\033[1;30m\002"
  #   ANSI_LGRAY        = "\001\033[0;37m\002"
  #   ANSI_WHITE        = "\001\033[1;37m\002"
  #   ANSI_RED          = "\001\033[0;31m\002"
  #   ANSI_LRED         = "\001\033[1;31m\002"
  #   ANSI_GREEN        = "\001\033[0;32m\002"
  #   ANSI_LGREEN       = "\001\033[1;32m\002"
  #   ANSI_BROWN        = "\001\033[0;33m\002"
  #   ANSI_YELLOW       = "\001\033[1;33m\002"
  #   ANSI_BLUE         = "\001\033[0;34m\002"
  #   ANSI_LBLUE        = "\001\033[1;34m\002"
  #   ANSI_PURPLE       = "\001\033[0;35m\002"
  #   ANSI_LPURPLE      = "\001\033[1;35m\002"
  #   ANSI_CYAN         = "\001\033[0;36m\002"
  #   ANSI_LCYAN        = "\001\033[1;36m\002"
  #
  #   ANSI_BACKBLACK    = "\001\033[40m\002"
  #   ANSI_BACKRED      = "\001\033[41m\002"
  #   ANSI_BACKGREEN    = "\001\033[42m\002"
  #   ANSI_BACKYELLOW   = "\001\033[43m\002"
  #   ANSI_BACKBLUE     = "\001\033[44m\002"
  #   ANSI_BACKPURPLE   = "\001\033[45m\002"
  #   ANSI_BACKCYAN     = "\001\033[46m\002"
  #   ANSI_BACKGRAY     = "\001\033[47m\002"
  #
  #   ANSI_RESET        = "\001\033[0m\002"
  #   ANSI_BOLD         = "\001\033[1m\002"
  #   ANSI_UNDERSCORE   = "\001\033[4m\002"
  #   ANSI_BLINK        = "\001\033[5m\002"
  #   ANSI_REVERSE      = "\001\033[7m\002"
  #   ANSI_CONCEALED    = "\001\033[8m\002"
  #
  #   XTERM_SET_TITLE   = "\001\033]2;\002"
  #   XTERM_END         = "\001\007\002"
  #   ITERM_SET_TAB     = "\001\033]1;\002"
  #   ITERM_END         = "\001\007\002"
  #   SCREEN_SET_STATUS = "\001\033]0;\002"
  #   SCREEN_END        = "\001\007\002"
  # end
  #
  # begin # Custom Prompt
  #   if ENV['RAILS_ENV']
  #     name = "rails #{ENV['RAILS_ENV']}"
  #     colors = ANSI_BACKBLUE + ANSI_YELLOW
  #   else
  #     name = "ruby"
  #     colors = ANSI_BACKPURPLE + ANSI_YELLOW
  #   end
  #
  #   if IRB and IRB.conf[:PROMPT]
  #     IRB.conf[:PROMPT][:SD] = {
  #       :PROMPT_I => "#{colors}#{name}: %m #{ANSI_RESET}\n>> ", # normal prompt
  #       :PROMPT_S => "%l> ",  # string continuation
  #       :PROMPT_C => " > ",   # code continuation
  #       :PROMPT_N => " > ",   # code continuation too?
  #       :RETURN   => "#{ANSI_BOLD}# => %s  #{ANSI_RESET}\n\n",  # return value
  #       :AUTO_INDENT => true
  #     }
  #     IRB.conf[:PROMPT][:SD_PLAIN] = {
  #       :PROMPT_I => "#{name}: %m >> ", # normal prompt
  #       :PROMPT_S => "%l> ",  # string continuation
  #       :PROMPT_C => " > ",   # code continuation
  #       :PROMPT_N => " > ",   # code continuation too?
  #       :RETURN   => "# => %s\n\n",  # return value
  #       :AUTO_INDENT => true
  #     }
  #     IRB.conf[:PROMPT_MODE] = :SD
  #   end
  # end

  # begin # Ben Bleything's history methods, as seen at http://dotfiles.org/~topfunky/.irbrc
  #   def history(how_many = 50)
  #     history_size = Readline::HISTORY.size

  #     # no lines, get out of here
  #     puts "No history" and return if history_size == 0

  #     start_index = 0

  #     # not enough lines, only show what we have
  #     if history_size <= how_many
  #       how_many  = history_size - 1
  #       end_index = how_many
  #     else
  #       end_index = history_size - 1 # -1 to adjust for array offset
  #       start_index = end_index - how_many
  #     end

  #     start_index.upto(end_index) {|i| print_line i}
  #     nil
  #   end
  #   alias :h  :history

  #   # -2 because -1 is ourself
  #   def history_do(lines = (Readline::HISTORY.size - 2))
  #     irb_eval lines
  #     nil
  #   end
  #   alias :h! :history_do

  #   def history_write(filename, lines)
  #     file = File.open(filename, 'w')

  #     get_lines(lines).each do |l|
  #       file << "#{l}\n"
  #     end

  #     file.close
  #   end
  #   alias :hw :history_write

  #   def get_line(line_number)
  #     Readline::HISTORY[line_number]
  #   end

  #   def get_lines(lines = [])
  #     return [get_line(lines)] if lines.is_a? Fixnum

  #     out = []

  #     lines = lines.to_a if lines.is_a? Range

  #     lines.each do |l|
  #       out << Readline::HISTORY[l]
  #     end

  #     return out
  #   end

  #   def print_line(line_number, show_line_numbers = true)
  #     print "[%04d] " % line_number if show_line_numbers
  #     puts get_line(line_number)
  #   end

  #   def irb_eval(lines)
  #     to_eval = get_lines(lines)

  #     eval to_eval.join("\n")

  #     to_eval.each {|l| Readline::HISTORY << l}
  #   end
  # end

  begin # Utility methods
    def pm(obj, *options) # Print methods
      methods = obj.methods - (options.include?(:more) ? [] : Object.methods)
      filter = options.select {|opt| opt.kind_of? Regexp}.first
      methods = methods.select {|name| name =~ filter} if filter

      data = methods.sort.collect do |name|
        method = obj.method(name)
        args = "(" + case method.arity <=> 0
        when 1
          ("a"..(?a + method.arity - 1).chr).to_a.join(", ")
        when -1
          ("a"..(?a - method.arity - 1).chr).to_a.join(", ")
        else
          ""
        end + ")"
        klass = $1 if method.inspect =~ /Method: (.*?)#/
        klass = $1 if klass =~ /\((.*?)\)/
        [name, args, klass]
      end
      max_name_length = data.collect {|item| item[0].size}.max
      max_args_length = data.collect {|item| item[1].size}.max
      data.each do |item|
        print " #{ANSI_BOLD}#{item[0].rjust(max_name_length)}#{ANSI_RESET}"
        print "#{ANSI_GRAY}#{item[1].ljust(max_args_length)}#{ANSI_RESET}"
        print "   #{ANSI_LGRAY}#{item[2]}#{ANSI_RESET}\n"
      end
      data.size
    end

    def to_browser(data)
      File.open("/tmp/browser.html", "w+") {|file| file.puts data}
      system "open /tmp/browser.html"
    end
  end

  begin # Rails tricks
    if ENV.include?('RAILS_ENV')
      # Show the rails log in the console
#      if !Object.const_defined?('RAILS_DEFAULT_LOGGER')
#        require 'logger'
#        Object.const_set('RAILS_DEFAULT_LOGGER', Logger.new(STDOUT))
#      end
    end
  end

  # ARGV.concat [ "--readline", "--prompt-mode", "simple" ]
  IRB_RC_HAS_LOADED = true

  # Use Pry everywhere
  require 'pry'
  Pry.start
  exit
end
